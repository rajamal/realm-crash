apply plugin: "com.android.application"

project.ext.envConfigFiles = [
        dev: ".env",
        prod: ".env.prod",
]
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply from: "../../node_modules/@bugsnag/react-native/bugsnag-react-native.gradle"

import com.android.build.OutputFile
import org.apache.tools.ant.taskdefs.condition.Os


/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
     //enableHermes: true,  // clean and rebuild if changing
     nodeExecutableAndArgs: ["node", "--max_old_space_size=12288"],
     entryFile: "index.js",
     bundleAssetName: "frontm.bundle",
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}


android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.frontm.onship"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 136
        versionName "2.2.3"
        multiDexEnabled true
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
        resValue "string", "build_config_package", "com.frontm.frontm"
        buildConfigField 'String', 'appType', '"onship"'
        buildConfigField 'String', 'domain', '"onship"'
        missingDimensionStrategy 'react-native-camera', 'general'
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
        if (isNewArchitectureEnabled()) {
            // We configure the NDK build only if you decide to opt-in for the New Architecture.
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_PLATFORM=android-21",
                        "APP_STL=c++_shared",
                        "NDK_TOOLCHAIN_VERSION=clang",
                        "GENERATED_SRC_DIR=$buildDir/generated/source",
                        "PROJECT_BUILD_DIR=$buildDir",
                        "REACT_ANDROID_DIR=$rootDir/../node_modules/react-native/ReactAndroid",
                        "REACT_ANDROID_BUILD_DIR=$rootDir/../node_modules/react-native/ReactAndroid/build"
                    cFlags "-Wall", "-Werror", "-fexceptions", "-frtti", "-DWITH_INSPECTOR=1"
                    cppFlags "-std=c++17"
                    // Make sure this target name is the same you specify inside the
                    // src/main/jni/Android.mk file for the `LOCAL_MODULE` variable.
                    targets "rndiffapp_appmodules"
                    // Fix for windows limit on number of character in file paths and in command lines
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        arguments "NDK_APP_SHORT_COMMANDS=true"
                    }
                }
            }
            if (!enableSeparateBuildPerCPUArchitecture) {
                ndk {
                    abiFilters (*reactNativeArchitectures())
                }
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
        release {
            
        }
    }
    if (isNewArchitectureEnabled()) {
        // We configure the NDK build only if you decide to opt-in for the New Architecture.
        externalNativeBuild {
            ndkBuild {
                path "$projectDir/src/main/jni/Android.mk"
            }
        }
        def reactAndroidProjectDir = project(':ReactAndroid').projectDir
        def packageReactNdkDebugLibs = tasks.register("packageReactNdkDebugLibs", Copy) {
            dependsOn(":ReactAndroid:packageReactNdkDebugLibsForBuck")
            from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
            into("$buildDir/react-ndk/exported")
        }
        def packageReactNdkReleaseLibs = tasks.register("packageReactNdkReleaseLibs", Copy) {
            dependsOn(":ReactAndroid:packageReactNdkReleaseLibsForBuck")
            from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
            into("$buildDir/react-ndk/exported")
        }
        afterEvaluate {
            // If you wish to add a custom TurboModule or component locally,
            // you should uncomment this line.
            // preBuild.dependsOn("generateCodegenArtifactsFromSchema")
            preDebugBuild.dependsOn(packageReactNdkDebugLibs)
            preReleaseBuild.dependsOn(packageReactNdkReleaseLibs)
            // Due to a bug inside AGP, we have to explicitly set a dependency
            // between configureNdkBuild* tasks and the preBuild tasks.
            // This can be removed once this is solved: https://issuetracker.google.com/issues/207403732
            configureNdkBuildRelease.dependsOn(preReleaseBuild)
            configureNdkBuildDebug.dependsOn(preDebugBuild)
            reactNativeArchitectures().each { architecture ->
                tasks.findByName("configureNdkBuildDebug[${architecture}]")?.configure {
                    dependsOn("preDebugBuild")
                }
                tasks.findByName("configureNdkBuildRelease[${architecture}]")?.configure {
                    dependsOn("preReleaseBuild")
                }
            }
        }
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }

    flavorDimensions "frontm"

    //change or add environment based variables here
    productFlavors {
        dev {
            dimension "frontm"
            buildConfigField 'String', 'GRPC_HOST', '"grpcdev.frontm.ai"'
            buildConfigField 'int', 'GRPC_PORT', '443'
            missingDimensionStrategy "store", "play"
        }
        prod {
            dimension "frontm"
            buildConfigField 'String', 'GRPC_HOST', '"prod.frontm.ai"'
            buildConfigField 'int', 'GRPC_PORT', '443'
            missingDimensionStrategy "store", "play"
        }
    }

    //Add build related configurations here.
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            signingConfig signingConfigs.debug
        }

    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
            
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/io.netty.versions.properties'
        pickFirst 'lib/x86/libjsc.so'
        pickFirst 'lib/x86_64/libjsc.so'
        pickFirst 'lib/arm64-v8a/libjsc.so'
        pickFirst 'lib/armeabi-v7a/libjsc.so'
    }
}



dependencies {
    implementation project(':react-native-config')
    implementation project(':rn-fetch-blob')
    implementation project(':@react-native-mapbox-gl_maps')
    implementation project(':react-native-webview')
    implementation project(':react-native-video')
    implementation project(':react-native-version-check')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-svg')
    implementation project(':react-native-sound')
    implementation project(':react-native-image-resizer')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-iap')
    implementation project(':react-native-fs')
    implementation project(':react-native-document-picker')
    implementation(project(':react-native-device-info')){
        exclude group: 'com.google.android.gms', module: 'play-services-gcm'
    }
    implementation project(':react-native-contacts')
    implementation(project(':react-native-camera')){
        exclude group: 'com.google.android.gms'
    }
    implementation project(':react-native-background-timer')
    implementation project(':react-native-android-open-settings')
    implementation project(':react-native-sqlite-storage')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'com.google.android.gms:play-services-auth:20.2.0'
    implementation 'com.google.android.gms:play-services-base:18.1.0'
    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation 'com.google.android.gms:play-services-basement:18.1.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation "com.android.support:support-v4:27.1.1" // added this
    implementation 'com.android.support:appcompat-v7:27.0.0'
    implementation 'com.android.support:design:27.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    compileOnly "javax.annotation:javax.annotation-api:1.2"
    implementation 'org.conscrypt:conscrypt-android:2.0.0'
    implementation project(':react-native-sensors')
    implementation 'com.facebook.android:facebook-android-sdk:[4,5)'

    implementation 'com.facebook.fresco:fresco:1.13.0'
    implementation 'com.facebook.fresco:animated-gif:1.13.0'

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    implementation project(':WebRTCModule')
    implementation project(':react-native-keep-awake')
    implementation project(':react-native-notifications')

    implementation ('com.android.support:support-annotations:28.0.0')
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'com.google.firebase:firebase-core:21.1.0'
    // Firebase messaging version that works with react-native-notifications
    implementation 'com.google.firebase:firebase-messaging:23.0.7'
    //implementation ('com.google.firebase:firebase-inappmessaging-display:20.1.2'){
    //    exclude group: 'com.google.android.gms', module: 'play-services-ads-identifier'
    //}
    implementation 'io.grpc:grpc-okhttp:1.32.2'
    implementation 'com.google.guava:guava:27.0.1-android'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-telemetry:6.1.0'
    implementation(project(':react-native-jitsi-meet')) {
        exclude group: 'com.facebook.react',module:'react-native-vector-icons'
        exclude group: 'com.facebook.react',module:'react-native-svg'
        exclude group: 'com.facebook.react',module:'react-native-webview'
        exclude group: 'com.facebook.react',module:'react-native-webrtc'
        exclude group: 'com.facebook.react',module:'react-native-community-async-storage'
        exclude group: 'com.facebook.react',module:'react-native-splash-screen'
        exclude group: 'com.facebook.react', module:'react-native-device-info'
        exclude group: 'com.facebook.react',module:'react-native-video'
        exclude group: 'com.facebook.react',module:'react-native-sound'
        exclude group: 'com.facebook.react',module:'react-native-fetch-blob'
        exclude group: 'com.facebook.react',module:'react-native-google-signin'
        exclude group: 'com.facebook.react',module:'react-native-background-timer'
        exclude group: 'com.facebook.react',module:'react-native-async-storage'
        exclude group: 'com.facebook.react',module:'react-native-community_netinfo'
        exclude group: 'com.facebook.react',module:'react-native-keep-awake'
        exclude group: 'com.facebook.react',module:'react-native-community_clipboard'
        exclude group: 'com.facebook.react',module:'react-native-masked-view_masked-view'
        exclude group: 'com.facebook.react',module:'react-native-slider'
        exclude group: 'com.facebook.react',module:'react-native-gesture-handler'
        exclude group: 'com.facebook.react',module:'react-native-reanimated'
        exclude group: 'com.facebook.react',module:'react-native-screens'
        exclude group: 'com.facebook.react',module:'react-native-safe-area-context'
        //exclude group: 'com.facebook', module:'hermes'
    } 
}

if (isNewArchitectureEnabled()) {
    // If new architecture is enabled, we let you build RN from source
    // Otherwise we fallback to a prebuilt .aar bundled in the NPM package.
    // This will be applied to all the imported transtitive dependency.
    configurations.all {
        resolutionStrategy.dependencySubstitution {
            substitute(module("com.facebook.react:react-native"))
                    .using(project(":ReactAndroid")).because("On New Architecture we're building React Native from source")
        }
    }
}


// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.google.protobuf'
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)



buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        
//        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

//protobuf {
//    protoc { artifact = 'com.google.protobuf:protoc:3.5.1-1' }
//    plugins {
//        javalite { artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0" }
//        grpc {
//            artifact = 'io.grpc:protoc-gen-grpc-java:1.17.1' // CURRENT_GRPC_VERSION
//        }
//    }
//    generateProtoTasks {
//        all().each { task ->
//            task.plugins {
//                javalite {}
//                grpc { // Options added to --grpc_out
//                    option 'lite' }
//            }
//        }
//    }
//}


def isNewArchitectureEnabled() {
    // To opt-in for the New Architecture, you can either:
    // - Set `newArchEnabled` to true inside the `gradle.properties` file
    // - Invoke gradle with `-newArchEnabled=true`
    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}