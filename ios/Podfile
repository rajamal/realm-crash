# Uncomment the next line to define a global platform for your project
platform :ios, '11.0'
install! 'cocoapods', :deterministic_uuids => false
inhibit_all_warnings!
require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

project 'frontm_mobile',
'DebugDevelop' => :debug,
'Debug' => :debug,
'ReleaseDevelop' => :release,
'Release' => :release



target 'frontm_mobile' do
  
  pod 'RNCPushNotificationIOS', :path => '../node_modules/@react-native-community/push-notification-ios/RNCPushNotificationIOS.podspec'

  config = use_native_modules!
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # to enable hermes on iOS, change `false` to `true` and then install pods
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => flags[:fabric_enabled],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  pod 'JitsiMeetFrontmSDK', :path => '.', :inhibit_warnings => true
  pod 'react-native-webrtc', :path => '../node_modules/react-native-webrtc'
  permissions_path = '../node_modules/react-native-permissions/ios'

  pod 'Permission-Camera', :path => "#{permissions_path}/Camera"
  pod 'Permission-Contacts', :path => "#{permissions_path}/Contacts"
  pod 'Permission-LocationAccuracy', :path => "#{permissions_path}/LocationAccuracy"
  pod 'Permission-LocationAlways', :path => "#{permissions_path}/LocationAlways"
  pod 'Permission-LocationWhenInUse', :path => "#{permissions_path}/LocationWhenInUse"
  pod 'Permission-MediaLibrary', :path => "#{permissions_path}/MediaLibrary"
  pod 'Permission-Microphone', :path => "#{permissions_path}/Microphone"
  pod 'Permission-Motion', :path => "#{permissions_path}/Motion"
  pod 'Permission-Notifications', :path => "#{permissions_path}/Notifications"
  pod 'Permission-PhotoLibrary', :path => "#{permissions_path}/PhotoLibrary"
  pod 'Permission-PhotoLibraryAddOnly', :path => "#{permissions_path}/PhotoLibraryAddOnly"
  pod 'Permission-Reminders', :path => "#{permissions_path}/Reminders"
  
  pod 'CocoaLumberjack'
  use_native_modules!

  # Enables Flipper.
  # use_flipper!()

  pod 'react-native-webview', :path => '../node_modules/react-native-webview'

  def find_and_replace(dir, findstr, replacestr)
    Dir[dir].each do |name|
        text = File.read(name)
        replace = text.gsub(findstr,replacestr)
        if text != replace
            puts "Fix: " + name
            File.open(name, "w") { |file| file.puts replace }
            STDOUT.flush
          pod 'RNReanimated', :path => '../node_modules/react-native-reanimated'

        end
    end
    Dir[dir + '*/'].each(&method(:find_and_replace))
  end

  pre_install do |installer|
    puts "pre install \n"
    $RNMBGL.pre_install(installer)
    FileUtils.remove_dir("./Pods/JitsiMeetFrontmSDK/Frameworks/WebRTC.xcframework") if File.directory?("./Pods/JitsiMeetFrontmSDK/Frameworks/WebRTC.xcframework")
    puts "pre install again ?\n"
  end


  post_install do |installer|

    react_native_post_install(installer)
    __apply_Xcode_12_5_M1_post_install_workaround(installer)

    puts "post install \n"
    ## Fix for XCode 12.5
    #find_and_replace("../node_modules/react-native/React/CxxBridge/RCTCxxBridge.mm",
    #"_initializeModules:(NSArray<id<RCTBridgeModule>> *)modules", "_initializeModules:(NSArray<Class> *)modules")
    #find_and_replace("../node_modules/react-native/ReactCommon/turbomodule/core/platform/ios/RCTTurboModuleManager.mm",
    #"RCTBridgeModuleNameForClass(module))", "RCTBridgeModuleNameForClass(Class(module)))")
    #find_and_replace("../node_modules/react-native/ReactCommon/turbomodule/core/platform/ios/RCTTurboModuleManager.mm",
    #"RCTBridgeModuleNameForClass(strongModule))", "RCTBridgeModuleNameForClass(Class(strongModule)))")
    $RNMBGL.post_install(installer)
    installer.pods_project.build_configuration_list.build_configurations.each do |config|
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].append('PJ_AUTOCONF=1')
    end
    
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
          config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ""
          config.build_settings['CODE_SIGNING_REQUIRED'] = "NO"
          config.build_settings['CODE_SIGNING_ALLOWED'] = "NO"
          config.build_settings['ENABLE_BITCODE'] = 'NO'
      end
    end
    installer.pods_project.targets.each do |target|
      if target.name == "React"
        target.remove_from_project
      end
      # flipper_post_install(installer)
    end
  end
end
